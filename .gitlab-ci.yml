stages:
  - test-pipeline
  - train
  - test-api
  - build
  - deploy

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  HEROKU_STAGING_URL: https://$HEROKU_STAGING_APP.herokuapp.com/
  DOCKER_IMAGE: password_app
  # tells pipenv where to keep virtualenvs
  WORKON_HOME: venv/

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
 paths:
   - .cache/pip
   - venv/

# train:
#   stage: train
#   image: python:3.8.5-buster
#   script:
#     - echo "Get data from kaggle"
#     - pip install kaggle
#     - kaggle competitions download -c dmia-sport-2019-fall-intro -f train.csv -p packages/app/data/raw/
#     - kaggle competitions download -c dmia-sport-2019-fall-intro -f Xtest.csv -p packages/app/data/raw/
#     - echo "Running ML training pipeline"
#     - python -V
#     - cd packages/app
#     - pip install pipenv
#     - pipenv install --deploy
#     - pipenv run python train.py
#     - ls -R .
#   only:
#     changes:
#       - packages/app/VERSION

# build:
#   stage: build
#   image: docker:19.03.12
#   services:
#     - docker:19.03.12-dind
#   variables:
#     IMAGE_TAG_BRANCH: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE:$CI_COMMIT_REF_SLUG
#     IMAGE_TAG: $CI_REGISTRY_IMAGE/$DOCKER_IMAGE:$CI_COMMIT_SHA
#   script:
#     - echo "Building docker image"
#     - cd packages/app
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker build -t $IMAGE_TAG .
#     - docker push $IMAGE_TAG
#     - docker image tag $IMAGE_TAG $IMAGE_TAG_BRANCH
#     - docker push $IMAGE_TAG_BRANCH
#   only:
#     changes:
#       - packages/app/VERSION

staging:
  stage: deploy
  image: node:15.4.0-buster
  script:
    - apt-get update -qy
    - apt-get install -y git ruby-dev
    - gem install dpl
    - cd packages/app
    # this is required because heroku use pip 9.0.2 with Pipfile.lock for selected python runtime
    - python3 -V
    - "apt-get update || : && apt-get install python3-pip -y"
    - pip3 install pipenv
    # install pyenv to provide required python version for pipenv
    - curl https://pyenv.run | bash
    - export PATH="/root/.pyenv/bin:$PATH"
    - eval "$(pyenv init -)"
    - eval "$(pyenv virtualenv-init -)"
    - pyenv install 3.8.5
    # generate requirements.txt
    - pipenv lock -r > requirements.txt
    - git add requirements.txt
    - git commit -m 'add requirements.txt for heroku build'
    # do the actual deploy
    - dpl --provider=heroku --app=$HEROKU_STAGING_APP --api-key=$HEROKU_STAGING_API_KEY
    - curl $HEROKU_STAGING_URL
  environment:
    name: staging
    url: $HEROKU_STAGING_URL
  only:
    refs:
      - master
#     changes:
#       - packages/app/VERSION
